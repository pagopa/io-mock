version: "3.2"

services:

  cosmosdb:
    image: cosmosdb
    env_file:
      - env.cosmosdb
    build:
      context: ./
      dockerfile: cosmosdb/Dockerfile
    ports:
      - ${COSMOSDB_PORT}:3000
    networks:
      - io-fn

  fixtures:
    image: fixtures
    env_file:
      - env.cosmosdb
      - env.fixtures
    build:
      context: ./
      dockerfile: fixtures/Dockerfile
    depends_on:
      - cosmosdb
    networks:
      - io-fn

  fn-admin-storage:
    image: azurite
    build:
      context: ./
      dockerfile: azurite/Dockerfile
    ports:
      - "10000:10000"
      - "10001:10001"
      - "10002:10002"
    networks:
      - io-fn

  fn-app-storage:
    image: azurite
    command: ["sh", "-c", "node bin/azurite -l /opt/azurite/folder --blobPort 10003 --queuePort 10004 --tablePort 10005"]
    ports:
      - "10003:10003"
      - "10004:10004"
      - "10005:10005"
    depends_on:
      - fn-admin-storage
    networks:
      - io-fn

  fn-public-storage:
    image: azurite
    command: ["sh", "-c", "node bin/azurite -l /opt/azurite/folder --blobPort 10006 --queuePort 10007 --tablePort 10008"]
    ports:
      - "10006:10006"
      - "10007:10007"
      - "10008:10008"
    depends_on:
      - fn-admin-storage
    networks:
      - io-fn

  fn-services-storage:
    image: azurite
    command: ["sh", "-c", "node bin/azurite -l /opt/azurite/folder --blobPort 10009 --queuePort 10010 --tablePort 10011"]
    ports:
      - "10009:10009"
      - "10010:10010"
      - "10011:10011"
    depends_on:
      - fn-admin-storage
    networks:
      - io-fn

  assets-storage:
    image: azurite
    command: ["sh", "-c", "node bin/azurite -l /opt/azurite/folder --blobPort 10012 --queuePort 10013 --tablePort 10014"]
    ports:
      - "10012:10012"
      - "10013:10013"
      - "10014:10014"
    depends_on:
      - fn-admin-storage
    networks:
      - io-fn

  logs-storage:
    image: azurite
    command: ["sh", "-c", "node bin/azurite -l /opt/azurite/folder --blobPort 10015 --queuePort 10016 --tablePort 10017"]
    ports:
      - "10015:10015"
      - "10016:10016"
      - "10017:10017"
    depends_on:
      - fn-admin-storage
    networks:
      - io-fn

  queue-storage:
    image: azurite
    command: ["sh", "-c", "node bin/azurite -l /opt/azurite/folder --blobPort 10018 --queuePort 10019 --tablePort 10020"]
    ports:
      - "10018:10018"
      - "10019:10019"
      - "10020:10020"
    depends_on:
      - fn-admin-storage
    networks:
      - io-fn

  functions:
    image: functions
    build:
      context: ./
      dockerfile: functions/Dockerfile
    command: /bin/true

  functions-admin:
    image: io-functions-admin
    build:
      context: ./
      dockerfile: io-functions-admin/Dockerfile
    env_file:
      - env.cosmosdb
      - env.io-functions-admin
    working_dir: /usr/src/app
    ports:
      - ${FUNCTIONS_ADMIN_PORT}:7071
    networks:
      - io-fn
    depends_on:
      - fn-admin-storage
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.functions-admin.rule=Host(`functions-admin.localhost`)"
      - "traefik.http.routers.functions-admin.entrypoints=web"

      # apply middleware to route
      - "traefik.http.routers.functions-admin.middlewares=testHeader"

  functions-app:
    image: io-functions-app
    build:
      context: ./
      dockerfile: io-functions-app/Dockerfile
    env_file:
      - env.cosmosdb
      - env.io-functions-app
    working_dir: /usr/src/app
    ports:
      - ${FUNCTIONS_APP_PORT}:7071
    networks:
      - io-fn
    depends_on:
      - fn-app-storage
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.functions-app.rule=Host(`functions-app.localhost`)"
      - "traefik.http.routers.functions-app.entrypoints=web"

  functions-public:
    image: io-functions-public
    build:
      context: ./
      dockerfile: io-functions-public/Dockerfile
    env_file:
      - env.cosmosdb
      - env.io-functions-public
    working_dir: /usr/src/app
    ports:
      - ${FUNCTIONS_PUBLIC_PORT}:7071
    networks:
      - io-fn
    depends_on:
      - fn-public-storage
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.functions-public.rule=Host(`functions-public.localhost`)"
      - "traefik.http.routers.functions-public.entrypoints=web"

  functions-services:
    image: io-functions-services
    build:
      context: ./
      dockerfile: io-functions-services/Dockerfile
    env_file:
      - env.cosmosdb
      - env.io-functions-services
    working_dir: /usr/src/app
    ports:
      - ${FUNCTIONS_SERVICES_PORT}:7071
    networks:
      - io-fn
    depends_on:
      - fn-services-storage
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.functions-services.rule=Host(`functions-services.localhost`)"
      - "traefik.http.routers.functions-services.entrypoints=web"

      # apply middleware to route
      - "traefik.http.routers.functions-services.middlewares=testHeader"

  backend:
    image: io-backend
    build:
      context: ./
      dockerfile: io-backend/Dockerfile
      args:
       - GITHUB_TOKEN
       - IO_BACKEND_BRANCH
    env_file:
      - env.io-backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.functions-services.rule=Host(`backend.localhost`)"
      - "traefik.http.routers.functions-services.entrypoints=web"
    ports:
      - ${IO_BACKEND_PORT}:80
    networks:
      - io-fn
    depends_on:
      - logs-storage

  redis:
    container_name: redis
    image: wodby/redis:3.2-2.1.5
    ports:
      - "6379:6379"
    environment:
      REDIS_TIMEOUT: 300
      REDIS_TCP_KEEPALIVE: 60
      REDIS_MAXMEMORY: 182m
    networks:
      - io-fn

  spid-testenv2:
    container_name: spid-testenv2
    image: italia/spid-testenv2
    ports:
      - "8088:8088"
    volumes:
      - "./testenv2/conf:/app/conf:cached"
    networks:
      - io-fn

  mailhog:
    image: mailhog/mailhog
    ports:
      - 1025:1025 # smtp server
      - 8025:8025 # web ui
    networks:
      - io-fn

  traefik:
    image: traefik:v2.0
    command: |-
      --entrypoints.web.address=:80
      --providers.docker=true
      --providers.docker.network=io-fn
      --log.level=ERROR
    ports:
      - ${API_GATEWAY_PORT}:${API_GATEWAY_PORT}
    networks:
      - io-fn
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      # define middleware to be used in some functions services
      - "traefik.http.middlewares.testHeader.headers.customrequestheaders.x-user-id=unused"
      - "traefik.http.middlewares.testHeader.headers.customrequestheaders.x-user-groups=${REQ_USER_GROUPS}"
      - "traefik.http.middlewares.testHeader.headers.customrequestheaders.x-subscription-id=${REQ_SERVICE_ID}"
      - "traefik.http.middlewares.testHeader.headers.customrequestheaders.x-user-email=unused@example.com"
      - "traefik.http.middlewares.testHeader.headers.customrequestheaders.x-user-note=unused"
      - "traefik.http.middlewares.testHeader.headers.customrequestheaders.x-functions-key=unused"

networks:
  io-fn:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1450
